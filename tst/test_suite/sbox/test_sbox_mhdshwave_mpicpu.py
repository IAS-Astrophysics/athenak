"""
MHD shearing wave (shwave) test for shearing box module.
Runs compressible shwave test of JGG (figure 11), and compares evolution of dBy to
semi-analytic solution generated by numerically integrating the linearized EOMs
"""

# Modules
import pytest
from subprocess import Popen, PIPE
import test_suite.testutils as testutils
import athena_read
import numpy as np

# semi-analytic solution for amplitude of By(t) for compressible MHD shearing wave
# Data spans t in [0,3] every dt=0.01
# solution provided by C. Gammie & B. Johnson by integrating ODEs of linearized EOM
dbyc = [
    1.36931e-07,   1.28815e-07,  1.07707e-07,  7.62110e-08,  4.23426e-08,  1.32185e-09,
    -3.87724e-08, -7.40506e-08, -9.87246e-08, -1.16802e-07, -1.23362e-07, -1.18208e-07,
    -1.04505e-07, -8.04852e-08, -4.98106e-08, -1.93897e-08,  1.54716e-08,  4.80139e-08,
    7.54768e-08,   9.38418e-08,  1.06338e-07,  1.09509e-07,  1.04556e-07,  9.09907e-08,
    7.03736e-08,   4.77003e-08,  1.93603e-08, -9.68054e-09, -3.42018e-08, -5.84271e-08,
    -7.74343e-08, -8.89311e-08, -9.51379e-08, -9.40686e-08, -8.73045e-08, -7.39243e-08,
    -5.56273e-08, -3.64617e-08, -1.31662e-08,  1.03062e-08,  2.99858e-08,  4.94559e-08,
    6.49406e-08,   7.46434e-08,  8.05161e-08,  8.09087e-08,  7.68229e-08,  6.77213e-08,
    5.46246e-08,   4.04430e-08,  2.26687e-08,  4.12050e-09, -1.20621e-08, -2.89283e-08,
    -4.34604e-08, -5.37980e-08, -6.20288e-08, -6.60789e-08, -6.68865e-08, -6.38676e-08,
    -5.82536e-08, -4.91178e-08, -3.76301e-08, -2.60487e-08, -1.22002e-08,  2.19303e-10,
    1.36256e-08,   2.57754e-08,  3.50509e-08,  4.33582e-08,  4.91123e-08,  5.19474e-08,
    5.25523e-08,   5.08796e-08,  4.67220e-08,  4.04784e-08,  3.35132e-08,  2.45141e-08,
    1.58711e-08,   5.88514e-09, -3.90754e-09, -1.20847e-08, -2.03312e-08, -2.65610e-08,
    -3.21058e-08, -3.59443e-08, -3.78613e-08, -3.83426e-08, -3.73463e-08, -3.47612e-08,
    -3.08277e-08, -2.64050e-08, -2.06473e-08, -1.50695e-08, -8.55572e-09, -2.07482e-09,
    3.43521e-09,   9.12927e-09,  1.35814e-08,  1.77565e-08,  2.06369e-08,  2.28818e-08,
    2.40554e-08,   2.42214e-08,  2.34848e-08,  2.20908e-08,  1.98127e-08,  1.69331e-08,
    1.40054e-08,   1.04574e-08,  7.21290e-09,  3.61130e-09,  5.70384e-10, -2.55057e-09,
    -5.25076e-09, -7.23267e-09, -8.94492e-09, -9.98909e-09, -1.06303e-08, -1.07364e-08,
    -1.04248e-08, -9.68374e-09, -8.74610e-09, -7.46591e-09, -6.20714e-09, -4.74801e-09,
    -3.33695e-09, -2.19415e-09, -1.10171e-09, -3.47726e-10,  2.20111e-10,  4.60218e-10,
    4.33263e-10,   1.12372e-10, -3.87121e-10, -1.13795e-09, -1.91805e-09, -2.84862e-09,
    -3.65496e-09, -4.45758e-09, -5.06642e-09, -5.38102e-09, -5.41891e-09, -5.13141e-09,
    -4.41655e-09, -3.27645e-09, -1.91551e-09, -2.63436e-11,  1.92502e-09,  4.35233e-09,
    6.63758e-09,   9.24538e-09,  1.17674e-08,  1.38270e-08,  1.58137e-08,  1.71830e-08,
    1.81667e-08,   1.84652e-08,  1.80795e-08,  1.68795e-08,  1.51137e-08,  1.23567e-08,
    9.26436e-09,   5.14873e-09,  4.86000e-10, -3.98366e-09, -9.19885e-09, -1.38296e-08,
    -1.88192e-08, -2.28700e-08, -2.67765e-08, -2.97761e-08, -3.15177e-08, -3.22850e-08,
    -3.18126e-08, -2.99192e-08, -2.65765e-08, -2.24343e-08, -1.65713e-08, -1.04396e-08,
    -2.73753e-09,  5.51545e-09,  1.30248e-08,  2.13114e-08,  2.82155e-08,  3.50901e-08,
    4.06429e-08,   4.41833e-08,  4.63278e-08,  4.64287e-08,  4.43929e-08,  4.00582e-08,
    3.43460e-08,   2.60156e-08,  1.71668e-08,  5.97422e-09, -6.02759e-09, -1.68954e-08,
    -2.87610e-08, -3.96068e-08, -4.78670e-08, -5.50615e-08, -5.91900e-08, -6.09194e-08,
    -5.93185e-08, -5.50306e-08, -4.70783e-08, -3.74576e-08, -2.42025e-08, -9.00962e-09,
    5.46658e-09,   2.20015e-08,  3.78398e-08,  5.05149e-08,  6.23142e-08,  7.06773e-08,
    7.46584e-08,   7.48131e-08,  7.09304e-08,  6.20939e-08,  4.88831e-08,  3.40093e-08,
    1.46222e-08,  -6.42394e-09, -2.54179e-08, -4.57730e-08, -6.36356e-08, -7.63025e-08,
    -8.58570e-08, -8.95711e-08, -8.75315e-08, -7.91275e-08, -6.45986e-08, -4.72013e-08,
    -2.37300e-08,  2.29595e-09,  2.60330e-08,  5.15391e-08,  7.37823e-08,  8.92576e-08,
    1.00359e-07,   1.03656e-07,  9.95387e-08,  8.70136e-08,  6.68360e-08,  4.04104e-08,
    1.32961e-08,  -1.90367e-08, -5.06481e-08, -7.58516e-08, -9.85180e-08, -1.12978e-07,
    -1.17595e-07, -1.12743e-07, -9.73153e-08, -7.23556e-08, -4.37686e-08, -6.94745e-09,
    3.15430e-08,   6.41650e-08,  9.57125e-08,  1.18594e-07,  1.30180e-07,  1.29677e-07,
    1.16581e-07,   9.10965e-08,  5.54419e-08,  1.79436e-08, -2.69008e-08, -6.99926e-08,
    -1.06573e-07, -1.30160e-07, -1.43629e-07, -1.41384e-07, -1.23128e-07, -9.46564e-08,
    -5.17544e-08, -1.80583e-09,  4.95549e-08,  9.14983e-08,  1.29231e-07,  1.52269e-07,
    1.57305e-07,   1.43115e-07,  1.15221e-07,  6.96857e-08,  1.42947e-08, -4.41858e-08,
    -9.83014e-08, -1.36897e-07, -1.64096e-07, -1.70176e-07, -1.53648e-07, -1.16029e-07,
    -6.84345e-08, -5.18798e-09,  6.01508e-08,  1.18489e-07,  1.61356e-07,  1.82156e-07,
    1.79271e-07
]

_res = [16, 32]  # resolutions to test
input_file = "inputs/mhd_shwave.athinput"


def compute_error(data):
    # plotting routines below were used to confirm solutions was correct
    # import matplotlib.pyplot as plt
    # plt.figure
    # plt.plot(data["time"], data["dByc"])
    # plt.plot(data["time"], dbyc, color='red')
    # plt.show()
    return (np.abs(data["dByc"] - dbyc)).mean()


def arguments(res):
    """Assemble arguments for run command"""
    return [
        "job/basename=shwave4",
        "mesh/nx1=" + repr(res),
        "mesh/nx2=" + repr(res),
        "mesh/nx3=" + repr(res),
        "meshblock/nx1=16",
        "meshblock/nx2=16",
        "meshblock/nx3=16"
    ]


errors = {}


def test_run():
    """Loop over resolutions and run test with given reconstruction/flux."""
    try:
        for res in _res:
            # set number of threads to number of MeshBlocks
            nthreads = 8 if res == 32 else 1
            results = testutils.mpi_run(input_file, arguments(res), threads=nthreads)
            assert results, f"MHD shwave test run failed for {res}."
            data = athena_read.hst("shwave4.user.hst")
            errors[res] = compute_error(data)
            # delete history files so new data will be read properly
            Popen(["rm shwave4.user.hst"], shell=True, stdout=PIPE).communicate()
        l1_rms_lr = errors[_res[0]]
        l1_rms_hr = errors[_res[1]]
        # check absolute errors
        maxerr1 = 2.1e-8
        if l1_rms_lr > maxerr1:
            pytest.fail(
                f"MHD shwave error too large at lowest resolution, "
                f"error: {l1_rms_lr:g} threshold: {maxerr1:g}"
            )
        maxerr2 = 6.2e-9
        if l1_rms_hr > maxerr2:
            pytest.fail(
                f"MHD shwave error too large at highest resolution, "
                f"error: {l1_rms_hr:g} threshold: {maxerr2:g}"
            )
    finally:
        testutils.cleanup()
